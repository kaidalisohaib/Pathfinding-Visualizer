function equalArrays(a,b){if(!a||!b)return!1;if(a.length!==b.length)return!1;for(let c=0;c<a.length;c++)if(a[c]!==b[c])return!1;return!0}function cumulativeOffset(a){var b=0,c=0;do b+=a.offsetTop||0,c+=a.offsetLeft||0,a=a.offsetParent;while(a);return{top:b,left:c}}function sort(a,b=(c,a)=>c-a){return a.sort(b)}function insertAt(a,b,c){a.splice(b,0,c)}function inGrid(a,b,c){return!(0>a[0]||a[0]>b-1)&&!(0>a[1]||a[1]>c-1)}function nonRepeatingRand(a,b){const c=[];for(let d=a;d<=b;d++)c.push(d);for(ranNums=[],i=c.length,j=0;i--;)j=Math.floor(Math.random()*(i+1)),ranNums.push(c[j]),c.splice(j,1);return ranNums}class Queue{constructor(a){this.items=a.slice()}add(a){this.items.push(a)}get(){return this.items.shift()}getLength(){return this.items.length}}class Stack{constructor(a){this.items=a.slice()}add(a){this.items.push(a)}rem(){this.items.pop()}front(){return this.items[this.items.length-1]}get(){const a=this.front();return this.rem(),a}allItems(){return this.items.slice()}getLength(){return this.items.length}}class PriorityQueue{constructor(a=(c,a)=>c-a,b=[]){this.compareFunc=a,this.items=sort(b,this.compareFunc)}add(a){for(let b=this.items.length;0<=b;b--)if(-1==b-1){insertAt(this.items,b,a);break}else if(0<this.compareFunc(this.items[b-1],a)){insertAt(this.items,b,a);break}}get(){return this.items.shift()}getLength(){return this.items.length}empty(){return 0===this.items.length}head(){return 0<this.items.length?this.items[0]:void 0}}function DFSmaze(a,b){const c=[],d=[];for(let d=0;d<a;d++){const a=[];for(let c=0;c<b;c++)a.push(0);c.push(a)}const e=[Math.floor(Math.random()*a),Math.floor(Math.random()*b)];c[e[0]][e[1]]=1;for(const f=new Stack([e]);0!==f.getLength();){const e=Math.round(Math.random());let g=e?[.5>Math.random()?-1:1,0]:[0,.5>Math.random()?-1:1];const h=f.front(),k=[h[0]+2*g[0],h[1]+2*g[1]];if(inGrid(k,a,b)&&0===c[k[0]][k[1]]&&(c[h[0]+g[0]][h[1]+g[1]]=1,d.push([h[0]+g[0],h[1]+g[1]]),c[k[0]][k[1]]=1,d.push([k[0],k[1]]),f.add(k),!haveNeighborDFSmaze(k,c)))for(let a=f.front();!haveNeighborDFSmaze(a,c)&&0!==f.getLength()&&(f.rem(),a=f.front(),!!a););}return{walls:d.slice(),fill:!0}}function validDFSmaze(a,b){return 1!==b[a[0]][a[1]]}function haveNeighborDFSmaze(a,b){const c=[[0,2],[0,-2],[-2,0],[2,0]];for(let d=0;d<c.length;d++){const e=c[d],f=[a[0]+e[0],a[1]+e[1]];if(inGrid(f,b.length,b[0].length)&&validDFSmaze(f,b))return!0}return!1}function Kruskals(a,b){let c=0;const d=[];let e=[];const f=[[0,2],[0,-2],[2,0],[-2,0]],g=[];for(let c=0;c<a;c++){g.push([]);for(let a=0;a<b;a++)g[c].push(0)}const h=new PriorityQueue((c,a)=>a.weight-c.weight),k=nonRepeatingRand(1,a*b+1);for(let f=0;f<k.length-1;f++){const a=Math.floor(f/b),h=Math.floor(f%b);0==a%2&&0==h%2&&(c++,e.push({index:[a,h],weight:k[f]}),g[a][h]=k[f],d.push([a,h]))}for(e=sort(e,(c,a)=>a.weight-c.weight);1!=c;)for(let h=0;h<e.length;h++){const k=e[h],l=nonRepeatingRand(0,3);for(let e=0;e<l.length;e++){const h=f[l[e]],m=[k.index[0]+h[0],k.index[1]+h[1]];if(inGrid(m,a,b)&&g[m[0]][m[1]]!==g[k.index[0]][k.index[1]]){c--;const a=[k.index[0]+h[0]/2,k.index[1]+h[1]/2];g[a[0]][a[1]]=g[k.index[0]][k.index[1]],d.push(a);const b=g[m[0]][m[1]];for(let a=0;a<g.length;a++)for(let c=0;c<g[a].length;c++)g[a][c]===b&&(g[a][c]=g[k.index[0]][k.index[1]]);break}}}return{walls:d.slice(),fill:!0}}function Randomaze(a,b){const c=[];for(let d=0;d<a;d++){for(let a=0;a<b;a++)0===Math.floor(3*Math.random())&&c.push([d,a])}return{walls:c.slice(),fill:!1}}function AStar(a){const b=new PriorityQueue((c,a)=>a.f-c.f),c=[],d=[];let e=[];const f=[[0,1],[0,-1],[1,0],[-1,0]];for(let b=0;b<a.grid.length;b++){const d=[];for(let c=0;c<a.grid[b].length;c++)d.push({g:1/0,previous:void 0,visited:!1});c.push(d)}for(c[a.start[0]][a.start[1]].g=0,b.add({index:a.start,g:c[a.start[0]][a.start[1]].g,f:Math.abs(a.end[0]-a.start[0])+Math.abs(a.end[1]-a.start[1])});!b.empty();){const g=b.get();if(!c[g.index[0]][g.index[1]].visited){if(c[g.index[0]][g.index[1]].visited=!0,d.push(g.index),"end"===a.grid[g.index[0]][g.index[1]].currStatus){for(let a=g.index;void 0!==c[a[0]][a[1]].previous;)e.push(a),a=c[a[0]][a[1]].previous;break}f.forEach(d=>{const e=[g.index[0]+d[0],g.index[1]+d[1]];if(inGrid(e,a.width,a.height)&&"wall"!==a.grid[e[0]][e[1]].currStatus){const d=g.g+a.grid[e[0]][e[1]].weight;c[e[0]][e[1]].g>d&&!c[e[0]][e[1]].visited&&(c[e[0]][e[1]].g=d,c[e[0]][e[1]].previous=g.index,b.add({index:e,g:c[e[0]][e[1]].g,f:d+Math.abs(a.end[0]-e[0])+Math.abs(a.end[1]-e[1])}))}})}}d.shift(),e=e.reverse();const g={};for(let b=0;b<d.length;b++)void 0===g[d[b]]?g[d[b]]=1:g[d[b]]++;return{visitedNodes:d,visitedBestNodes:e}}function BFS(a){const b=new Queue([{position:a.start,oldPositions:[a.start]}]);let c=!1;const d=[],e={};e[a.start]=1;let f=[];for(const g=[[-1,0],[1,0],[0,1],[0,-1]];0!==b.getLength()&&!c;){const h=b.get();for(let k=0;k<g.length;k++){const l={position:h.position.slice(),oldPositions:h.oldPositions.slice()};if(l.position=[l.position[0]+g[k][0],l.position[1]+g[k][1]],inGrid(l.position,a.width,a.height)&&"wall"!==a.grid[l.position[0]][l.position[1]].currStatus&&!e[l.position])if(e[l.position]=1,l.oldPositions.push(l.position.slice()),equalArrays(l.position,a.end)){c=!0,l.oldPositions.shift(),f=l.oldPositions.slice(),d.push(l.position.slice());break}else d.push(l.position.slice()),b.add(l)}}return{visitedNodes:d,visitedBestNodes:f}}function DFS(a){const b=new Stack([a.start]),c=[],d={};let e=!1;const f=[[0,1],[0,-1],[1,0],[-1,0]];if(!haveNeighborDFS(a.start,a,d))return{visitedNodes:c,visitedBestNodes:[]};for(;!e&&0!==b.getLength();){const g=b.front();for(let h=0;h<f.length;h++){const k=[g[0]+f[h][0],g[1]+f[h][1]];if(inGrid(k,a.width,a.height)&&"wall"!==a.grid[k[0]][k[1]].currStatus&&!d[k])if(c.push(k),b.add(k),"end"===a.grid[k[0]][k[1]].currStatus){e=!0;break}else{if(d[k]=1,!haveNeighborDFS(k,a,d))for(let c=b.front();!haveNeighborDFS(c,a,d)&&0!==b.getLength()&&(b.rem(),c=b.front(),!!c););break}}}const g=b.allItems();return g.shift(),{visitedNodes:c,visitedBestNodes:g}}function haveNeighborDFS(a,b,c){const d=[[0,1],[0,-1],[-1,0],[1,0]];for(let e=0;e<d.length;e++){const f=d[e],g=[a[0]+f[0],a[1]+f[1]];if(inGrid(g,b.width,b.height)&&"wall"!==b.grid[g[0]][g[1]].currStatus&&!c[g])return!0}return!1}function Dijkstra(a){const b=new PriorityQueue((c,a)=>a.distance-c.distance),c=[],d=[];let e=[];const f=[[0,1],[0,-1],[1,0],[-1,0]];for(let b=0;b<a.grid.length;b++){const d=[];for(let c=0;c<a.grid[b].length;c++)d.push({distance:1/0,previous:void 0,visited:!1});c.push(d)}for(c[a.start[0]][a.start[1]].distance=0,b.add({index:a.start,distance:c[a.start[0]][a.start[1]].distance});!b.empty();){const g=b.get();if(d.push(g.index),"end"===a.grid[g.index[0]][g.index[1]].currStatus){for(let a=g.index;void 0!==c[a[0]][a[1]].previous;)e.push(a),a=c[a[0]][a[1]].previous;break}c[g.index[0]][g.index[1]].visited=!0,f.forEach(d=>{const e=[g.index[0]+d[0],g.index[1]+d[1]];if(inGrid(e,a.width,a.height)&&"wall"!==a.grid[e[0]][e[1]].currStatus){const d=g.distance+a.grid[e[0]][e[1]].weight;c[e[0]][e[1]].distance>d&&!c.visited&&(c[e[0]][e[1]].distance=d,c[e[0]][e[1]].previous=g.index,b.add({index:e,distance:c[e[0]][e[1]].distance}))}})}return d.shift(),e=e.reverse(),{visitedNodes:d,visitedBestNodes:e}}function GreedyBFS(a){const b=new PriorityQueue((c,a)=>a.distance-c.distance),c=[],d=[];let e=[];const f=[[0,1],[0,-1],[1,0],[-1,0]];for(let b=0;b<a.grid.length;b++){const d=[];for(let c=0;c<a.grid[b].length;c++)d.push({distance:1/0,previous:void 0,visited:!1});c.push(d)}for(c[a.start[0]][a.start[1]].distance=0,b.add({index:a.start,distance:c[a.start[0]][a.start[1]].distance});!b.empty();){const g=b.get();if(d.push(g.index),"end"===a.grid[g.index[0]][g.index[1]].currStatus){for(let a=g.index;void 0!==c[a[0]][a[1]].previous;)e.push(a),a=c[a[0]][a[1]].previous;break}c[g.index[0]][g.index[1]].visited=!0,f.forEach(d=>{const e=[g.index[0]+d[0],g.index[1]+d[1]];if(inGrid(e,a.width,a.height)&&"wall"!==a.grid[e[0]][e[1]].currStatus){const d=Math.abs(a.end[0]-e[0])+Math.abs(a.end[1]-e[1]),f=d+a.grid[e[0]][e[1]].weight;c[e[0]][e[1]].distance>f&&!c.visited&&(c[e[0]][e[1]].distance=f,c[e[0]][e[1]].previous=g.index,b.add({index:e,distance:c[e[0]][e[1]].distance}))}})}return d.shift(),e=e.reverse(),{visitedNodes:d,visitedBestNodes:e}}function Swarm(a){const b=new PriorityQueue((c,a)=>a.distance-c.distance),c=[],d=[];let e=[];const f=[[0,1],[0,-1],[1,0],[-1,0]];for(let b=0;b<a.grid.length;b++){const d=[];for(let c=0;c<a.grid[b].length;c++)d.push({distance:1/0,previous:void 0,visited:!1});c.push(d)}for(c[a.start[0]][a.start[1]].distance=0,b.add({index:a.start,distance:c[a.start[0]][a.start[1]].distance});!b.empty();){const g=b.get();if(d.push(g.index),"end"===a.grid[g.index[0]][g.index[1]].currStatus){for(let a=g.index;void 0!==c[a[0]][a[1]].previous;)e.push(a),a=c[a[0]][a[1]].previous;break}c[g.index[0]][g.index[1]].visited=!0,f.forEach(d=>{const e=[g.index[0]+d[0],g.index[1]+d[1]];if(inGrid(e,a.width,a.height)&&"wall"!==a.grid[e[0]][e[1]].currStatus){const d=g.distance+a.grid[e[0]][e[1]].weight+2*(Math.abs(a.end[0]-e[0])+Math.abs(a.end[1]-e[1]));c[e[0]][e[1]].distance>d&&!c.visited&&(c[e[0]][e[1]].distance=d,c[e[0]][e[1]].previous=g.index,b.add({index:e,distance:c[e[0]][e[1]].distance}))}})}return d.shift(),e=e.reverse(),{visitedNodes:d,visitedBestNodes:e}}const pathAlgo={"Breadth-first Search":{get:a=>BFS(a),weighted:!1},"Depth-first Search":{get:a=>DFS(a),weighted:!1},Dijkstra:{get:a=>Dijkstra(a),weighted:!0},"Greddy Breadth-first Search":{get:a=>GreedyBFS(a),weighted:!0},"A* (A star)":{get:a=>AStar(a),weighted:!0},Swarm:{get:a=>Swarm(a),weighted:!0}},mazeAlgo={"Randomized depth-first search":(a,b)=>DFSmaze(a,b),Random:(a,b)=>Randomaze(a,b),"Kruskal's":(a,b)=>Kruskals(a,b)},gridsConf={globalGrids:{},globalMazeGen:null,globalWidth:50,globalHeight:20,defaultSize:[20,10],nbrOfGrid:0,limit:Object.entries(pathAlgo).length,animated:!0,animationDelay:45,nodePerCycle:2,weighted:!1,limitWidthNodes:[4,125],limitHeightNodes:[1,50],weightedVal:10},resizeListener=new ResizeObserver(a=>{for(const b of a)changeNodesSize(b.target.id)});startup();function startup(){const a=document.getElementsByClassName("grid");for(let b=0;b<a.length;b++)gridsConf.nbrOfGrid++,initElement(a[b]);const b=document.createElement("input"),c=document.createElement("input"),d=document.createElement("ul"),e=document.createElement("button"),f=document.createElement("button"),g=document.createElement("button"),h=document.createElement("button"),k=document.createElement("button"),l=document.createElement("div"),m=document.createElement("div"),n=document.createElement("label"),o=document.createElement("input"),p=document.createElement("label"),q=document.createElement("input"),r=document.createElement("div"),s=document.createElement("div");o.type="checkbox",q.type="range",q.min=0,q.max=100,q.step=1,q.value=gridsConf.animationDelay,r.style.display="inline-block",r.innerHTML=`Delay: ${q.value}ms`,s.id="globalSizeNode",e.className="btn btn-success",h.className="btn btn-secondary",k.className="btn btn-secondary",l.className="btn-group",f.className="btn btn-primary",g.className="btn btn-primary dropdown-toggle dropdown-toggle-split",d.className="dropdown-menu dropdown-menu-dark",g.dataset.bsToggle="dropdown",f.textContent="Select a maze generator algorithm",o.checked=!0,o.onchange=()=>{gridsConf.animated=o.checked},q.oninput=()=>{const a=parseInt(q.value);gridsConf.animationDelay=a,0===a?(gridsConf.animated=!1,o.checked=!1,o.disabled=!0):o.disabled=!1,r.innerHTML=`Delay: ${a}ms`},e.onclick=()=>{for(const[a,b]of Object.entries(gridsConf.globalGrids))b&&(gridsConf[a].pathfindingAlgo&&!gridsConf[a].onanimation?findPath(a,gridsConf[a].pathfindingAlgo):gridsConf[a].onanimation&&(gridsConf[a].skip=!0,gridsConf.allSkiped=!0));gridsConf.allSkiped=!1},f.onclick=a=>{let b=!1;for(const[c,d]of Object.entries(gridsConf.globalGrids))if(d){b=!0;break}if(gridsConf.globalMazeGen&&b){let a=!1,b=!0;for(const[c,d]of Object.entries(gridsConf.globalGrids))d&&(gridsConf[c].onanimation?a=!0:!gridsConf[c].onanimation&&(b=!1,!equalArrays([gridsConf[c].width,gridsConf[c].height],[gridsConf.globalWidth,gridsConf.globalHeight])&&adjustGrid(document.getElementById(`${c}`),[gridsConf.globalWidth,gridsConf.globalHeight])));if(a||genGlobalMaze(gridsConf.globalMazeGen),b)for(const[a,b]of Object.entries(gridsConf.globalGrids))b&&(gridsConf[a].skip=!0,gridsConf.allSkiped=!0)}else a.preventDefault()};for(const[a,b]of Object.entries(mazeAlgo)){const b=document.createElement("a");b.textContent=a,b.className="dropdown-item btn",b.onclick=()=>{gridsConf.globalMazeGen=a,f.textContent=gridsConf.globalMazeGen},d.appendChild(b)}const t=document.getElementById("globalActions"),u=document.getElementById("globalSliders");c.type="range",c.className=`global-slider`,c.min=gridsConf.limitWidthNodes[0],c.max=gridsConf.limitWidthNodes[1],c.value=gridsConf.globalWidth,b.type="range",b.className=`global-slider`,b.min=gridsConf.limitHeightNodes[0],b.max=gridsConf.limitHeightNodes[1],b.value=gridsConf.globalHeight,c.onchange=()=>{gridsConf.globalWidth=parseInt(c.value);for(const[a,d]of Object.entries(gridsConf.globalGrids))d&&(document.getElementById(`${a}-width`).value=parseInt(c.value),document.getElementById(`${a}-size`).innerHTML=`${c.value} x ${b.value}`,adjustGrid(document.getElementById(`${a}`),[gridsConf.globalWidth,gridsConf.globalHeight]))},b.onchange=()=>{gridsConf.globalHeight=parseInt(b.value);for(const[a,d]of Object.entries(gridsConf.globalGrids))d&&(document.getElementById(`${a}-height`).value=parseInt(b.value),document.getElementById(`${a}-size`).innerHTML=`${c.value} x ${b.value}`,adjustGrid(document.getElementById(`${a}`),[gridsConf.globalWidth,gridsConf.globalHeight]))},s.innerHTML=`${c.value} x ${b.value}`,c.oninput=()=>{s.innerHTML=`${c.value} x ${b.value}`},b.oninput=()=>{s.innerHTML=`${c.value} x ${b.value}`},k.onclick=()=>{for(const[a,b]of Object.entries(gridsConf.globalGrids))b&&(gridsConf[a].onanimation||(clearWalls(a),clearPath(a),clearWeighted(a)))},h.onclick=()=>{for(const[a,b]of Object.entries(gridsConf.globalGrids))b&&(gridsConf[a].onanimation||clearPath(a))};const v=document.createElement("div"),w=document.createElement("button"),x=document.createElement("button");v.id="controlDiv",w.className="btn btn-warning",x.className="btn btn-warning",w.appendChild(document.createTextNode("Create a new grid")),x.appendChild(document.createTextNode("Delete the last grid")),w.onclick=()=>{if(gridsConf.nbrOfGrid<gridsConf.limit){gridsConf.nbrOfGrid++;const a=document.createElement("div");a.id=`grid${gridsConf.nbrOfGrid}`,a.className="grid",a.dataset.x=gridsConf.defaultSize[0],a.dataset.y=gridsConf.defaultSize[1],a.style.width="50%",document.getElementById("gridsDiv").appendChild(a),initElement(a)}},x.onclick=()=>{if(1!==gridsConf.nbrOfGrid&&!gridsConf[`grid${gridsConf.nbrOfGrid}`].onanimation){const a=document.getElementById(`grid${gridsConf.nbrOfGrid}`);resizeListener.unobserve(a),a.remove(),document.getElementById("gridsCheckBox").children[gridsConf.nbrOfGrid-1].remove(),gridsConf.nbrOfGrid--}},e.appendChild(document.createTextNode("Visualize all selected grids")),k.appendChild(document.createTextNode("Clear board")),h.appendChild(document.createTextNode("Clear path")),n.appendChild(o),n.appendChild(document.createTextNode("Animations")),p.appendChild(q),p.appendChild(r),m.appendChild(n),m.appendChild(p),u.style.color="black",v.appendChild(w),v.appendChild(x),v.appendChild(m),l.appendChild(f),l.appendChild(g),l.appendChild(d),t.appendChild(e),t.appendChild(l),t.appendChild(k),t.appendChild(h),u.appendChild(c),u.appendChild(b),u.appendChild(s),document.getElementById("topNav").appendChild(v),document.getElementById("rBody").style.marginTop=`${document.getElementById("topNav").clientHeight+5}px`;const y=document.getElementById("grid1"),z=document.getElementsByTagName("BODY")[0].clientWidth,A=document.getElementsByTagName("BODY")[0].clientHeight-cumulativeOffset(document.getElementById("grid1-gridDiv")).top;let B=Math.floor(.03*document.getElementsByTagName("BODY")[0].clientWidth),C=Math.floor(A*B/z);B=B>gridsConf.limitWidthNodes[1]?gridsConf.limitWidthNodes[1]:B<gridsConf.limitWidthNodes[0]?gridsConf.limitWidthNodes[0]:B,C=C>gridsConf.limitHeightNodes[1]?gridsConf.limitHeightNodes[1]:C<gridsConf.limitHeightNodes[0]?gridsConf.limitHeightNodes[0]:C,adjustGrid(y,[B,C]),window.onresize=()=>{const a=document.getElementById("rBody");a.style.marginTop=`${document.getElementById("topNav").clientHeight+5}px`,a.style.width=`${document.getElementsByTagName("BODY")[0].clientWidth}px`},window.onkeydown=a=>{if(87===a.which){for(const[a,b]of Object.entries(gridsConf.globalGrids))!gridsConf[a].onanimation&&"wall"===gridsConf[a].nodeStatusChoice&&null!==gridsConf[a].pathfindingAlgo&&pathAlgo[gridsConf[a].pathfindingAlgo].weighted&&(gridsConf[a].nodeStatusChoice="weighted");gridsConf.weighted||(a.preventDefault(),gridsConf.weighted=!0)}},window.onkeyup=a=>{if(87===a.which){for(const[a,b]of Object.entries(gridsConf.globalGrids))gridsConf[a].onanimation||"weighted"!==gridsConf[a].nodeStatusChoice||(gridsConf[a].nodeStatusChoice="wall");gridsConf.weighted&&(a.preventDefault(),gridsConf.weighted=!1)}};const D=new ResizeObserver(()=>{document.getElementById("rBody").style.marginTop=`${document.getElementById("topNav").clientHeight+5}px`}).observe(document.getElementById("topNav")),E=document.getElementById("information-container"),F=document.getElementById("infoBut");E.style.right="0%",document.getElementById("infoBut").onclick=()=>{E.style.right="0%",E.style.opacity="100%"},document.getElementById("infoClose").onclick=()=>{E.style.right="100%",E.style.opacity="0%"}}function initElement(a){gridsConf[a.id]={grid:[],width:+a.dataset.x,height:+a.dataset.y,isMousePressed:!1,lastNodePressed:null,nodeSize:null,grabbed:null,pathfindingAlgo:null,mazegenAlgo:null,onanimation:!1,nodeStatusChoice:"wall",skip:!1,lastGrabbed:!1,lastMouseDown:!1};const b=document.createElement("div"),c=document.createElement("div"),d=document.createElement("div"),e=document.createElement("div"),f=document.createElement("div"),g=document.createElement("div"),h=document.createElement("div"),k=document.createElement("input"),l=document.createElement("input"),m=document.createElement("input"),n=document.createElement("ul"),o=document.createElement("ul"),p=document.createElement("label"),q=document.createElement("button"),r=document.createElement("button"),s=document.createElement("button"),t=document.createElement("button"),u=document.createElement("button"),v=document.createElement("button");b.id=`${a.id}-gridDiv`,e.id=`${a.id}-inf`,e.className="searchInf",d.id=`${a.id}-size`,d.className="sizeNode",d.innerHTML=`${gridsConf[a.id].width} x ${gridsConf[a.id].height}`,c.className="sliderDiv",k.type="range",k.id=`${a.id}-width`,k.className=`${a.id}-slider`,k.min=gridsConf.limitWidthNodes[0],k.max=gridsConf.limitWidthNodes[1],k.value=a.dataset.x,l.type="range",l.id=`${a.id}-height`,l.className=`${a.id}-slider`,l.min=gridsConf.limitHeightNodes[0],l.max=gridsConf.limitHeightNodes[1],l.value=a.dataset.y,k.onchange=()=>{adjustGrid(a,[k.value,l.value])},l.onchange=()=>{adjustGrid(a,[k.value,l.value])},k.oninput=()=>{d.innerHTML=`${k.value} x ${l.value}`},l.oninput=()=>{d.innerHTML=`${k.value} x ${l.value}`},h.className="btnCont",n.className="dropdown-menu dropdown-menu-dark",o.className="dropdown-menu dropdown-menu-dark",q.className="btn btn-outline-success",q.textContent="Select a path finding algorithm",r.className="btn btn-outline-success dropdown-toggle dropdown-toggle-split",r.dataset.bsToggle="dropdown",s.className="btn btn-outline-primary",s.textContent="Select a maze generator algorithm",t.className="btn btn-outline-primary dropdown-toggle dropdown-toggle-split",t.dataset.bsToggle="dropdown",u.className="btn btn-outline-info",u.appendChild(document.createTextNode("Clear board")),v.className="btn btn-outline-info",v.appendChild(document.createTextNode("Clear path")),q.onclick=async()=>{gridsConf[a.id].pathfindingAlgo&&!gridsConf[a.id].onanimation?(q.textContent="Skip",await findPath(a.id,gridsConf[a.id].pathfindingAlgo),q.textContent=gridsConf[a.id].pathfindingAlgo):gridsConf[a.id].onanimation&&(gridsConf[a.id].skip=!0)},s.onclick=async()=>{gridsConf[a.id].mazegenAlgo&&!gridsConf[a.id].onanimation?(s.textContent="Skip",await genMaze(a.id,gridsConf[a.id].mazegenAlgo),s.textContent=gridsConf[a.id].mazegenAlgo):gridsConf[a.id].onanimation&&(gridsConf[a.id].skip=!0)},u.onclick=()=>{gridsConf[a.id].onanimation||(clearWalls(a.id),clearPath(a.id),clearWeighted(a.id))},v.onclick=()=>{gridsConf[a.id].onanimation||clearPath(a.id)};for(const[b,c]of Object.entries(pathAlgo)){const c=document.createElement("a");c.textContent=b,c.className="dropdown-item btn",c.onclick=()=>{gridsConf[a.id].pathfindingAlgo=b,q.textContent=gridsConf[a.id].pathfindingAlgo,pathAlgo[b].weighted||clearWeighted(a.id)},n.appendChild(c)}for(const[b,c]of Object.entries(mazeAlgo)){const c=document.createElement("a");c.textContent=b,c.className="dropdown-item btn",c.onclick=()=>{gridsConf[a.id].mazegenAlgo=b,s.textContent=gridsConf[a.id].mazegenAlgo},o.appendChild(c)}f.className="btn-group",g.className="btn-group",f.appendChild(q),f.appendChild(r),f.appendChild(n),g.appendChild(s),g.appendChild(t),g.appendChild(o),c.appendChild(k),c.appendChild(l),c.appendChild(d),c.appendChild(e),h.appendChild(f),h.appendChild(g),h.appendChild(u),h.appendChild(v),a.appendChild(h),a.appendChild(c),a.appendChild(b),initGrid(a.id,a.dataset.x,a.dataset.y),initEventListener(a.id,a.dataset.x,a.dataset.y),changeNodesSize(a.id),resizeListener.observe(a),gridsConf.globalGrids[`${a.id}`]=!1,m.type="checkbox",m.onchange=()=>{gridsConf.globalGrids[`${a.id}`]=!gridsConf.globalGrids[`${a.id}`]},p.onmouseenter=()=>{a.style.border="2px solid rgb(255,0,0,0.8)"},p.onmouseleave=()=>{a.style.border=""},p.appendChild(m),p.appendChild(document.createTextNode(`${"G"+a.id.slice(1)}`)),document.getElementById("gridsCheckBox").appendChild(p)}function initGrid(a,b,c){const d=document.getElementById(`${a}-gridDiv`);let e=`<table id="${a}-table" class="gridTable"><tbody id="${a}-gridBody" class="gridBody">`;const f=[],g=Math.round(c/2+.5)-1,h=[Math.floor(b/3+.5)-1,g],k=[Math.ceil(2*b/3+.5)-1,g];gridsConf[a].start=h,gridsConf[a].end=k;for(let d,g=0;g<b;g++){d=`<tr id="${a}-${g}" class="${a}-column column">`;const b=[];for(let e=0;e<c;e++)equalArrays([g,e],h)?(b.push(newNode("start")),d+=`<td id="${a}-${g}-${e}" class="${a}-node node node-start"></td>`):equalArrays([g,e],k)?(b.push(newNode("end")),d+=`<td id="${a}-${g}-${e}" class="${a}-node node node-end"></td>`):(b.push(newNode("normal")),d+=`<td id="${a}-${g}-${e}" class="${a}-node node node-normal"></td>`);f.push(b),d+="</tr>",e+=d}gridsConf[a].grid=f.slice(),e+=`</table></tbody>`,d.innerHTML=e}function initEventListener(a){const b=document.getElementById(`${a}-gridBody`);b.onmousedown=b=>{gridsConf[a].onanimation||1!==b.which||(gridsConf[a].isMousePressed=!0)},b.onmouseup=b=>{gridsConf[a].onanimation||1!==b.which||(gridsConf[a].isMousePressed=!1,gridsConf[a].grabbed=null)},b.onmouseenter=b=>{1!==b.which||gridsConf[a].onanimation||(null!==gridsConf[a].lastGrabbed&&(gridsConf[a].grabbed=gridsConf[a].lastGrabbed),gridsConf[a].lastMouseDown&&(gridsConf[a].isMousePressed=gridsConf[a].lastMouseDown))},b.onmouseleave=()=>{gridsConf[a].lastGrabbed=gridsConf[a].grabbed,gridsConf[a].lastMouseDown=gridsConf[a].isMousePressed,gridsConf[a].isMousePressed=!1,gridsConf[a].grabbed=null};for(let b,c=0;c<gridsConf[a].width;c++){b=document.getElementById(`${a}-${c}`),b.onmousedown=a=>{a.preventDefault()};for(let b=0;b<gridsConf[a].height;b++)addEventToNode(a,c,b)}}function addEventToNode(a,b,c){const d=document.getElementById(`${a}-${b}-${c}`);d.onmousedown=d=>{d.preventDefault(),gridsConf[a].onanimation||("start"===gridsConf[a].grid[b][c].currStatus||"end"===gridsConf[a].grid[b][c].currStatus?gridsConf[a].grabbed=gridsConf[a].grid[b][c].currStatus:1===d.which&&changeNode(a,b,c,gridsConf.animated),gridsConf[a].lastNodePressed=[b,c])},d.onmouseenter=()=>{gridsConf[a].isMousePressed&&!equalArrays(gridsConf[a].lastNodePressed,[b,c])&&"start"!==gridsConf[a].grid[b][c].currStatus&&"end"!==gridsConf[a].grid[b][c].currStatus&&(gridsConf[a].grabbed&&(gridsConf[a].nodeStatusChoice=gridsConf[a].grid[gridsConf[a].lastNodePressed[0]][gridsConf[a].lastNodePressed[1]].lastStatus,gridsConf[a][gridsConf[a].grabbed]=[b,c],changeNode(a,gridsConf[a].lastNodePressed[0],gridsConf[a].lastNodePressed[1],gridsConf.animated),gridsConf[a].nodeStatusChoice=gridsConf[a].grabbed),changeNode(a,b,c,gridsConf.animated),gridsConf[a].lastNodePressed=[b,c],gridsConf[a].nodeStatusChoice="wall",gridsConf.weighted&&null!==gridsConf[a].pathfindingAlgo&&pathAlgo[gridsConf[a].pathfindingAlgo].weighted&&(gridsConf[a].nodeStatusChoice="weighted"))}}async function findPath(a,b){document.getElementById(`${a}-inf`).innerHTML="",gridsConf[a].onanimation=!0;const c=pathAlgo[b].get(gridsConf[a]);clearPath(a),gridsConf[a].nodeStatusChoice="visited";for(let d=0;d<c.visitedNodes.length;d++){const b=c.visitedNodes[d];0===gridsConf.animationDelay||gridsConf[a].skip?changeNode(a,b[0],b[1],!1):(0==d%gridsConf.nodePerCycle&&(await sleep(gridsConf.animationDelay)),changeNode(a,b[0],b[1],gridsConf.animated))}gridsConf[a].nodeStatusChoice="bestPath";for(let d=0;d<c.visitedBestNodes.length;d++){const b=c.visitedBestNodes[d];0===gridsConf.animationDelay||gridsConf[a].skip?changeNode(a,b[0],b[1],!1):(await sleep(gridsConf.animationDelay),changeNode(a,b[0],b[1],gridsConf.animated))}gridsConf[a].nodeStatusChoice="wall",gridsConf[a].onanimation=!1;const d=document.getElementById(`${a}-inf`);0===c.visitedBestNodes.length?(d.style.border="1px solid red",d.innerHTML=`${c.visitedNodes.length} node visited | No path found!`):(d.style.border="2px solid green",d.innerHTML=`  ${c.visitedNodes.length} node visited | ${c.visitedBestNodes.length} step`),gridsConf[a].skip=!1}async function genMaze(a,b){gridsConf[a].nodeStatusChoice="wall",gridsConf[a].onanimation=!0;const c=mazeAlgo[b](gridsConf[a].width,gridsConf[a].height);if(clearWalls(a),clearPath(a),clearWeighted(a),c.fill)for(let b=0;b<gridsConf[a].grid.length;b++)for(let c=0;c<gridsConf[a].grid[b].length;c++)changeNode(a,b,c,!1);let d=0;for(let e=0;e<c.walls.length;e++)0===gridsConf.animationDelay||gridsConf[a].skip?changeNode(a,c.walls[e][0],c.walls[e][1],!1):(0==d%gridsConf.nodePerCycle&&(await sleep(gridsConf.animationDelay)),changeNode(a,c.walls[e][0],c.walls[e][1],gridsConf.animated)),d++;gridsConf[a].onanimation=!1,gridsConf[a].skip=!1}async function genGlobalMaze(a){const b=mazeAlgo[a](gridsConf.globalWidth,gridsConf.globalHeight);let c=0;const d=Object.assign({},gridsConf.globalGrids);for(const[c,e]of Object.entries(d))if(e&&(gridsConf[c].onanimation=!0,clearWalls(c),clearPath(c),clearWeighted(c),b.fill))for(let a=0;a<gridsConf[c].grid.length;a++)for(let b=0;b<gridsConf[c].grid[a].length;b++)changeNode(c,a,b,!1);for(let e=0;e<b.walls.length;e++){c++,0!=c%gridsConf.nodePerCycle||gridsConf.allSkiped||0===gridsConf.animationDelay||(await sleep(gridsConf.animationDelay));for(const[a,c]of Object.entries(d))c&&(0===gridsConf.animationDelay||gridsConf[a].skip?changeNode(a,b.walls[e][0],b.walls[e][1],!1):changeNode(a,b.walls[e][0],b.walls[e][1],gridsConf.animated))}for(const[b,c]of Object.entries(d))c&&(gridsConf[b].onanimation=!1,gridsConf[b].skip=!1);gridsConf.allSkiped=!1}function changeNode(a,b,c,d){const e=document.getElementById(`${a}-${b}-${c}`);return"start"!==gridsConf[a].grid[b][c].currStatus&&"end"!==gridsConf[a].grid[b][c].currStatus&&(gridsConf[a].grid[b][c].lastStatus=gridsConf[a].grid[b][c].currStatus),null===gridsConf[a].grabbed&&("start"===gridsConf[a].grid[b][c].currStatus||"end"===gridsConf[a].grid[b][c].currStatus)?(gridsConf[a].grid[b][c].lastStatus=gridsConf[a].grid[b][c].lastStatus===gridsConf[a].nodeStatusChoice?"normal":gridsConf[a].nodeStatusChoice,null):void(gridsConf[a].grid[b][c].currStatus!==gridsConf[a].nodeStatusChoice&&"normal"!==gridsConf[a].nodeStatusChoice?(e.classList.remove(e.classList[2]),"weighted"===gridsConf[a].nodeStatusChoice?(e.classList.add(d?`node-normal-weighted-a`:`node-normal-weighted`),gridsConf[a].grid[b][c].weight=gridsConf.weightedVal,gridsConf[a].grid[b][c].currStatus="weighted"):"weighted"!==gridsConf[a].grid[b][c].currStatus||"wall"===gridsConf[a].nodeStatusChoice||"start"===gridsConf[a].nodeStatusChoice||"end"===gridsConf[a].nodeStatusChoice?(gridsConf[a].grid[b][c].weight=1,e.classList.add(d?`node-${gridsConf[a].nodeStatusChoice}-a`:`node-${gridsConf[a].nodeStatusChoice}`),gridsConf[a].grid[b][c].currStatus=gridsConf[a].nodeStatusChoice):(e.classList.add(d?`node-${gridsConf[a].nodeStatusChoice}-weighted-a`:`node-${gridsConf[a].nodeStatusChoice}-weighted`),gridsConf[a].grid[b][c].currStatus="weighted")):(e.classList.remove(e.classList[2]),e.classList.add("node-normal"),gridsConf[a].grid[b][c].currStatus="normal",gridsConf[a].grid[b][c].weight=1))}function newNode(a){return{currStatus:a,lastStatus:a,weight:1}}function changeNodesSize(a){const b=document.getElementsByClassName(`${a}-node`),c=Math.floor((document.getElementById(a).clientWidth-20)/+gridsConf[a].width)-2;for(let d=0;d<b.length;d++){const a=b.item(d);a.style.width=`${c}px`,a.style.height=`${c}px`}gridsConf[a].nodeSize=c}function adjustGrid(a,b){return gridsConf[a.id].onanimation?(document.getElementById(`${a.id}-width`).value=gridsConf[a.id].width,document.getElementById(`${a.id}-height`).value=gridsConf[a.id].height,document.getElementById(`${a.id}-size`).innerHTML=`${gridsConf[a.id].width} x ${gridsConf[a.id].height}`,0):void(a.dataset.x=b[0],a.dataset.y=b[1],document.getElementById(`${a.id}-gridDiv`).innerHTML="",gridsConf[a.id].grid=[],gridsConf[a.id].width=+a.dataset.x,gridsConf[a.id].height=+a.dataset.y,gridsConf[a.id].isMousePressed=!1,gridsConf[a.id].lastNodePressed=null,gridsConf[a.id].nodeSize=null,gridsConf[a.id].currStatus="wall",initGrid(a.id,b[0],b[1]),initEventListener(a.id,b[0],b[1]),changeNodesSize(a.id),document.getElementById(`${a.id}-width`).value=b[0],document.getElementById(`${a.id}-height`).value=b[1],document.getElementById(`${a.id}-size`).innerHTML=`${gridsConf[a.id].width} x ${gridsConf[a.id].height}`)}function clearPath(a){const b=document.getElementById(`${a}-inf`);b.innerHTML="",b.style.border="",gridsConf[a].nodeStatusChoice="normal";for(let b=0;b<gridsConf[a].width;b++)for(let c=0;c<gridsConf[a].height;c++)"visited"===gridsConf[a].grid[b][c].currStatus||"bestPath"===gridsConf[a].grid[b][c].currStatus?changeNode(a,b,c,!1):"weighted"===gridsConf[a].grid[b][c].currStatus?(gridsConf[a].grid[b][c].currStatus="normal",gridsConf[a].nodeStatusChoice="weighted",changeNode(a,b,c,!1),gridsConf[a].nodeStatusChoice="normal"):("visited"===gridsConf[a].grid[b][c].lastStatus||"bestPath"===gridsConf[a].grid[b][c].lastStatus)&&(gridsConf[a].grid[b][c].lastStatus="normal");gridsConf[a].nodeStatusChoice="wall",gridsConf.weighted&&(gridsConf[a].nodeStatusChoice="weight")}function clearWalls(a){gridsConf[a].nodeStatusChoice="normal";for(let b=0;b<gridsConf[a].width;b++)for(let c=0;c<gridsConf[a].height;c++)"wall"===gridsConf[a].grid[b][c].currStatus?changeNode(a,b,c,!1):"wall"===gridsConf[a].grid[b][c].lastStatus&&(gridsConf[a].grid[b][c].lastStatus="normal");gridsConf[a].nodeStatusChoice="wall"}function clearWeighted(a){gridsConf[a].nodeStatusChoice="normal";for(let b=0;b<gridsConf[a].width;b++)for(let c=0;c<gridsConf[a].height;c++)"weighted"===gridsConf[a].grid[b][c].currStatus?changeNode(a,b,c,!1):"weighted"===gridsConf[a].grid[b][c].lastStatus&&(gridsConf[a].grid[b][c].lastStatus="normal");gridsConf[a].nodeStatusChoice="wall"}function sleep(a){return new Promise(b=>setTimeout(b,a))}